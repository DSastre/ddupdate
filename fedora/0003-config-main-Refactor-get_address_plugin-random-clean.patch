From 82024365da3bfbacd5cf1741933dc9d6670cbc4e Mon Sep 17 00:00:00 2001
From: Alec Leamas <leamas.alec@gmail.com>
Date: Fri, 2 Feb 2018 13:34:37 +0100
Subject: [PATCH 3/3] config, main: Refactor get_address_plugin(), random
 cleanup.

---
 lib/ddupdate/config.py | 23 ++++++++++-------------
 lib/ddupdate/main.py   | 18 +++++++++---------
 2 files changed, 19 insertions(+), 22 deletions(-)

diff --git a/lib/ddupdate/config.py b/lib/ddupdate/config.py
index f4ba2aa..5d5d755 100755
--- a/lib/ddupdate/config.py
+++ b/lib/ddupdate/config.py
@@ -138,8 +138,7 @@ def get_address_plugin(log, paths):
 
     Parameters:
       - log: Standard python log instance.
-      - paths: List of strings, path candidates to load plugins from.
-      - options: List of --service-option options.
+      - paths: List of strings, directory paths to load plugins from.
 
     Return:
       Name of selected address plugin.
@@ -153,16 +152,14 @@ def get_address_plugin(log, paths):
     web_addr = web_default_ip.get_ip(log, {})
     print("1  Use address as seen from Internet [%s]" % web_addr.v4)
     print("2  Use address as seen on local network [%s]" % if_addr.v4)
-    text = input("Select address to register (1, 2) [1]: ")
-    text = text if text else '1'
-    try:
-        ix = int(text)
-    except ValueError:
-        raise _GoodbyeError("Illegal numeric input", 1)
-    if ix == 1:
-        return 'default-web-ip'
-    elif ix == 2:
-        return 'default-if'
+    print("3  Use address as decided by service")
+    ix = input("Select address to register (1, 2, 3) [1]: ").strip()
+    ix = ix if ix else '1'
+    plugin_by_ix = {
+        '1': 'default-web-ip', '2': 'default-if', '3': 'ip-disabled'
+    }
+    if ix in plugin_by_ix:
+        return plugin_by_ix[ix]
     else:
         raise _GoodbyeError("Illegal value", 1)
 
@@ -309,7 +306,7 @@ def start_service():
     print("Starting service and displaying logs")
     cmd = 'systemctl daemon-reload'
     cmd += ';systemctl start ddupdate.service'
-    cmd += ';systemctl status ddupdate.service'
+    cmd += ';journalctl --since -60s -u ddupdate.service'
     cmd = ['su', '-c', cmd]
     subprocess.run(cmd)
     print('Use "journalctl -u ddupdate.service" to display logs.')
diff --git a/lib/ddupdate/main.py b/lib/ddupdate/main.py
index c2c9c73..5880f3e 100755
--- a/lib/ddupdate/main.py
+++ b/lib/ddupdate/main.py
@@ -34,7 +34,8 @@ DEFAULTS = {
     'address-plugin': 'default-if',
     'service-plugin': 'dry-run',
     'loglevel': 'info',
-    'options': None,
+    'service-options': None,
+    'address-options': None,
     'ip-cache': os.path.join(CACHE_DIR, 'ddupdate'),
     'force': False
 }
@@ -232,9 +233,9 @@ def parse_options(conf):
         parser.print_help()
         raise _GoodbyeError()
     if not opts.address_options:
-        opts.address_options = conf['options']
+        opts.address_options = conf['address-options']
     if not opts.service_options:
-        opts.service_options = conf['options']
+        opts.service_options = conf['service-options']
     opts.loglevel = level_by_name[opts.loglevel]
     opts.ip_cache = conf['ip-cache']
     return opts
@@ -278,7 +279,7 @@ def load_module(name, path):
 
 def plugin_loader(dirpath, parent_class):
     """
-    Load all plugins in dirpath having a class derived from parent.
+    Load all plugins in dirpath having a class derived from parent_class.
 
     Parameters:
       - dirpath: string, all path/*.py files are plugin candidates.
@@ -295,8 +296,8 @@ def plugin_loader(dirpath, parent_class):
             module = load_module(basename, plugpath)
         except ImportError:
             continue
-        # pylint: disable=undefined-loop-variable
         for member_class in [m[1] for m in inspect.getmembers(module)]:
+            # pylint: disable=undefined-loop-variable
             if not inspect.isclass(member_class):
                 continue
             if not issubclass(member_class, parent_class):
@@ -328,7 +329,7 @@ def list_plugins(plugins):
 
 
 def plugin_help(ip_plugins, service_plugins, plugid):
-    """Print full help for given plugin (noreturn)."""
+    """Print full help for given plugin."""
     if plugid in ip_plugins:
         plugin = ip_plugins[plugid]
     elif plugid in service_plugins:
@@ -382,12 +383,11 @@ def get_plugins(log, opts):
     """
     Handles plugin listing, plugin help  or load plugins.
 
-    return: (ip plugins, service plugins).
+    return: (ip plugin, service plugin).
     """
     ip_plugins = {}
     service_plugins = {}
-    load_paths = build_load_path(log)
-    for path in load_paths:
+    for path in build_load_path(log):
         getters, setters = load_plugins(path, log)
         for name, plugin in getters.items():
             ip_plugins.setdefault(name, plugin)
-- 
2.13.6

